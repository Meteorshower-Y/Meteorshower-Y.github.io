{
    "version": "https://jsonfeed.org/version/1",
    "title": "Meteorshower_Y • All posts by \"模板\" tag",
    "description": "",
    "home_page_url": "https://meteorshower-y.github.io",
    "items": [
        {
            "id": "https://meteorshower-y.github.io/2022/11/14/%E5%BF%AB%E8%AF%BB/",
            "url": "https://meteorshower-y.github.io/2022/11/14/%E5%BF%AB%E8%AF%BB/",
            "title": "快读",
            "date_published": "2022-11-14T09:09:33.598Z",
            "content_html": "<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wdGlsb3BzaXN3LmdpdGh1Yi5pby8yMDIyLzA4LzA5LyVFNSVCRiVBQiVFOCVBRiVCQiVFNSVCRiVBQiVFNSU4NiU5OSVFNiU5RCVCRiVFNSVBRCU5MC8=\">Ptilopsis_w 快读</span>的简化版（）</p>\n<h2 id=\"v-10\"><a class=\"markdownIt-Anchor\" href=\"#v-10\">#</a> V 1.0</h2>\n<p>支持整数读入，单字符和字符串读入，支持多参读入，如果读字符串只能一次传一个参。</p>\n<h3 id=\"example\"><a class=\"markdownIt-Anchor\" href=\"#example\">#</a> Example</h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a; </span><br><span class=\"line\"><span class=\"type\">char</span> s;</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> b; </span><br><span class=\"line\"><span class=\"built_in\">read</span>(a, s, b);</span><br><span class=\"line\"><span class=\"type\">char</span> S[<span class=\"number\">100</span>], T[<span class=\"number\">100</span>];</span><br><span class=\"line\"><span class=\"built_in\">read</span>(S), <span class=\"built_in\">read</span>(T);</span><br></pre></td></tr></table></figure>\n<h3 id=\"完整版code\"><a class=\"markdownIt-Anchor\" href=\"#完整版code\">#</a> 完整版 Code</h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> Aniciry</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> READSIZE = <span class=\"number\">100000</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> ibuf[READSIZE], *p1, *p2, ch;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"keyword\">define</span> isseen(ch) (ch &gt; 32)</span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"keyword\">define</span> isspace(ch) (ch &lt;= 32 and ch != EOF)</span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"keyword\">define</span> isdigit(ch) (ch &gt;= <span class=\"string\">&#x27;0&#x27;</span> and ch &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"keyword\">define</span> getchar() ((p1==p2)and(p2=(p1=ibuf)+fread(ibuf,1,READSIZE,stdin),p1==p2)?(EOF):(*p1++))</span></span><br><span class=\"line\">    <span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">auto</span> <span class=\"title\">read</span><span class=\"params\">(T &amp;x)</span> -&gt; <span class=\"type\">void</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        x = <span class=\"number\">0</span>; ch = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!<span class=\"built_in\">isdigit</span>(ch) <span class=\"keyword\">and</span> ch != EOF) ch = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ch == EOF) <span class=\"keyword\">return</span> <span class=\"built_in\">void</span>();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"built_in\">isdigit</span>(ch)) x = x*<span class=\"number\">10</span>+(ch-<span class=\"string\">&#x27;0&#x27;</span>), ch = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">auto</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">char</span> &amp;x)</span> -&gt; <span class=\"type\">void</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        x = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"built_in\">isspace</span>(x)) x = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">auto</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">char</span> *s)</span> -&gt; <span class=\"type\">void</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        ch = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"built_in\">isspace</span>(ch)) ch = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"built_in\">isseen</span>(ch)) *s = ch, ++s, ch = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">        *s = <span class=\"string\">&#x27;\\000&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T, <span class=\"keyword\">typename</span> ...T1&gt;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">auto</span> <span class=\"title\">read</span><span class=\"params\">(T &amp;a, T1 &amp;...other)</span> -&gt; <span class=\"type\">void</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">read</span>(a), <span class=\"built_in\">read</span>(other...);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> Aniciry;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "模板"
            ]
        }
    ]
}