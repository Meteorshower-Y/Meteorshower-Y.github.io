{
    "version": "https://jsonfeed.org/version/1",
    "title": "Meteorshower_Y • All posts by \"题解\" tag",
    "description": "",
    "home_page_url": "https://meteorshower-y.github.io",
    "items": [
        {
            "id": "https://meteorshower-y.github.io/2022/08/10/CF1192B/",
            "url": "https://meteorshower-y.github.io/2022/08/10/CF1192B/",
            "title": "CF1192B Dynamic Diameter 题解",
            "date_published": "2022-08-10T13:00:09.110Z",
            "content_html": "<h2 id=\"cf1192b-题解\"><a class=\"markdownIt-Anchor\" href=\"#cf1192b-题解\">#</a> CF1192B 题解</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vQ0YxMTkyQg==\">题目链接</span><br>\n跟着 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZnNhZmRzZ2Frc2doLmJsb2cubHVvZ3Uub3JnL3NvbHV0aW9uLWNmMTE5MmI=\">duyi</span>dalao 的思路，轻而易举 (qian nan wan xian) 调出了本题。<br>\n既然 @ <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3VzZXIvMTAwNjc0\">duyi</span> 没放代码，那我就<s>来一发</s>吧。</p>\n<h3 id=\"题意简述\"><a class=\"markdownIt-Anchor\" href=\"#题意简述\">#</a> 题意简述</h3>\n<p>有一个 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> 个点的带权无向树， <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>q</mi></mrow><annotation encoding=\"application/x-tex\">q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span></span></span></span> 次操作，每次修改一条边的权值，要求在每次修改后，输出树的直径大小，强制在线。</p>\n<h3 id=\"题目分析\"><a class=\"markdownIt-Anchor\" href=\"#题目分析\">#</a> 题目分析</h3>\n<ol>\n<li>\n<p>对于两棵树合并后新树的直径，其两端点一定出自两树直径四个端点中，根据这一条性质我们就可以用线段树维护原树，自下向上合并节点就相当于合并它所代表的两棵子树。</p>\n</li>\n<li>\n<p>每次合并的时候，需要我们计算树上两点间距离，记该节点到根的距离为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">d</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\operatorname{d}(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\"><span class=\"mord mathrm\">d</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span> , 则 节点 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> 到 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> 的距离为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">d</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi mathvariant=\"normal\">d</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>−</mo><mn>2</mn><mo>×</mo><mi mathvariant=\"normal\">d</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">lca</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\operatorname{d}(x)+\\operatorname{d}(y)-2 \\times \\operatorname{d}(\\operatorname{lca}(x, y))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\"><span class=\"mord mathrm\">d</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\"><span class=\"mord mathrm\">d</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\"><span class=\"mord mathrm\">d</span></span><span class=\"mopen\">(</span><span class=\"mop\"><span class=\"mord mathrm\">l</span><span class=\"mord mathrm\">c</span><span class=\"mord mathrm\">a</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span> 。在四个点的六组搭配中，选择直径最大的一组作为答案向上传递。</p>\n</li>\n<li>\n<p>求树上到根的距离利用线段树 (这时候是区别于第一条的另一棵) 用两种选择，将边权化为点权后，一是单点修改加上区间查询，而是区间修改加上单点查询 (边权改变影响的只有子树，而子树在树剖后节点编号连续)。而这里我们采取后者。至于为什么不用前者…<s> 血的教训</s>。</p>\n</li>\n</ol>\n<h3 id=\"思路实现\"><a class=\"markdownIt-Anchor\" href=\"#思路实现\">#</a> 思路实现</h3>\n<ol>\n<li>我们对求出原树的 dfs 序，同时记录以该节点为根的子树在 dfs 序中的开始和结束编号，记为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">beg</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\operatorname{beg}(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\"><span class=\"mord mathrm\">b</span><span class=\"mord mathrm\">e</span><span class=\"mord mathrm\" style=\"margin-right:0.01389em;\">g</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span> 和 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">end</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\operatorname{end}(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\"><span class=\"mord mathrm\">e</span><span class=\"mord mathrm\">n</span><span class=\"mord mathrm\">d</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span> , 对 dfs 序建立第一棵线段树。 该线段树维护树的直径。</li>\n<li>对原树重链剖分，建第二棵线段树维护每个点到根的路径长。当然还要求 LCA  。</li>\n<li>可以使用 unordered_map 记录下求过的 LCA, 用 map 会多一个 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>log</mi><mo>⁡</mo></mrow><annotation encoding=\"application/x-tex\">\\log</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span></span></span></span> 的复杂度。</li>\n</ol>\n<h3 id=\"code\"><a class=\"markdownIt-Anchor\" href=\"#code\">#</a> Code</h3>\n<p>代码中函数名带有 ‘_1’ 的为维护直径的线段树，带有 ‘_2’ 的为维护到根距离的线段树。</p>\n<p>树剖就不需要解释了吧 (</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">dfs1</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> fa)</span> -&gt; <span class=\"type\">void</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    f[x] = fa; siz[x] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    dep[x] = dep[fa]+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> maxson = <span class=\"number\">0</span>, y;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = head[x]; i; i = a[i].next)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        y = a[i].to; <span class=\"keyword\">if</span>(y == fa) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"built_in\">dfs1</span>(y, x); siz[x] += siz[y];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(siz[y] &gt; siz[maxson]) maxson = y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    son[x] = maxson;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">dfs2</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> tp)</span> -&gt; <span class=\"type\">void</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    id[x] = ++tim; top[x] = tp;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(son[x]) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">dfs2</span>(son[x], tp); <span class=\"type\">int</span> y;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = head[x]; i; i = a[i].next)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            y = a[i].to;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(y == f[x] <span class=\"keyword\">or</span> y == son[x]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"built_in\">dfs2</span>(y, y);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">LCA</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> -&gt; <span class=\"type\">int</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(top[x] != top[y])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dep[top[x]] &lt; dep[top[y]]) y = f[top[y]]; </span><br><span class=\"line\">        <span class=\"keyword\">else</span> x = f[top[x]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(id[x] &gt; id[y]) <span class=\"keyword\">return</span> y;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>求 dfs 序</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">dfsx</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> -&gt; <span class=\"type\">void</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    d[++ct] = x;    <span class=\"comment\">//dfs序数组</span></span><br><span class=\"line\">    beg[x] = ct;    <span class=\"comment\">//子树起点</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = head[x], y; i; i = a[i].next)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        y = a[i].to; <span class=\"keyword\">if</span>(y == f[x]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"built_in\">dfsx</span>(y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ::end[x] = ct;  <span class=\"comment\">//子树终点(变量名end有冲突,所以加了作用域)</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>第一棵线段树</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">build_1</span><span class=\"params\">(<span class=\"type\">int</span> l, <span class=\"type\">int</span> r, <span class=\"type\">int</span> i)</span> -&gt; <span class=\"type\">void</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    dr[i].l = l;</span><br><span class=\"line\">    dr[i].r = r;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l == r) <span class=\"keyword\">return</span> (<span class=\"type\">void</span>)(dr[i].u = dr[i].v = d[l]);</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = (l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">build_1</span>(l, mid, <span class=\"built_in\">ls</span>(i));</span><br><span class=\"line\">    <span class=\"built_in\">build_1</span>(mid+<span class=\"number\">1</span>, r, <span class=\"built_in\">rs</span>(i));</span><br><span class=\"line\">    <span class=\"built_in\">pushup_1</span>(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">change_1</span><span class=\"params\">(<span class=\"type\">int</span> l, <span class=\"type\">int</span> r, <span class=\"type\">int</span> i)</span> -&gt; <span class=\"type\">void</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dr[i].l &gt; r <span class=\"keyword\">or</span> dr[i].r &lt; l) <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dr[i].l &gt;= l <span class=\"keyword\">and</span> dr[i].r &lt;= r) <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    <span class=\"built_in\">change_1</span>(l, r, <span class=\"built_in\">ls</span>(i));</span><br><span class=\"line\">    <span class=\"built_in\">change_1</span>(l, r, <span class=\"built_in\">rs</span>(i));</span><br><span class=\"line\">    <span class=\"built_in\">pushup_1</span>(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">pushup_1</span><span class=\"params\">(<span class=\"type\">int</span> i)</span> -&gt; <span class=\"type\">void</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    lu = dr[<span class=\"built_in\">ls</span>(i)].u, lv = dr[<span class=\"built_in\">ls</span>(i)].v;</span><br><span class=\"line\">    ru = dr[<span class=\"built_in\">rs</span>(i)].u, rv = dr[<span class=\"built_in\">rs</span>(i)].v;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*  左右子树的较优解  */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dr[<span class=\"built_in\">ls</span>(i)].val &gt;= dr[<span class=\"built_in\">rs</span>(i)].val) </span><br><span class=\"line\">        dr[i].u = dr[<span class=\"built_in\">ls</span>(i)].u, </span><br><span class=\"line\">        dr[i].v = dr[<span class=\"built_in\">ls</span>(i)].v, </span><br><span class=\"line\">        dr[i].val = dr[<span class=\"built_in\">ls</span>(i)].val; </span><br><span class=\"line\">    <span class=\"keyword\">else</span> </span><br><span class=\"line\">        dr[i].u = dr[<span class=\"built_in\">rs</span>(i)].u, </span><br><span class=\"line\">        dr[i].v = dr[<span class=\"built_in\">rs</span>(i)].v, </span><br><span class=\"line\">        dr[i].val = dr[<span class=\"built_in\">rs</span>(i)].val; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*  枚举剩下四种情况  */</span></span><br><span class=\"line\">    U = lu, V = ru; </span><br><span class=\"line\">    len = <span class=\"built_in\">calc</span>(U, V);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ru != rv) <span class=\"comment\">//重复的不计算了</span></span><br><span class=\"line\">    &#123;   </span><br><span class=\"line\">        len2 = <span class=\"built_in\">calc</span>(lu, rv); </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(len2 &gt; len) U = lu, V = rv, len = len2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(lu != lv) <span class=\"comment\">//重复的不计算了</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        len2 = <span class=\"built_in\">calc</span>(lv, ru); </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(len2 &gt; len) U = lv, V = ru, len = len2;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ru != rv) <span class=\"comment\">//重复的不计算了 </span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            len2 = <span class=\"built_in\">calc</span>(lv, rv); </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(len2 &gt; len) U = lv, V = rv, len = len2;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(len &gt; dr[i].val) </span><br><span class=\"line\">        dr[i].val = len, dr[i].u = U, dr[i].v = V;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">calc</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> -&gt; <span class=\"type\">long</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> lca;</span><br><span class=\"line\">    <span class=\"comment\">/* 将 x,y 压入一个数, 就不用 pair 了 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>( !mp.<span class=\"built_in\">count</span>(((<span class=\"type\">long</span>)(x)&lt;&lt;<span class=\"number\">32ll</span>)+y) ) mp[((<span class=\"type\">long</span>)(x)&lt;&lt;<span class=\"number\">32ll</span>)+y] = lca = <span class=\"built_in\">LCA</span>(x, y);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> lca = mp[((<span class=\"type\">long</span>)(x)&lt;&lt;<span class=\"number\">32ll</span>)+y];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">query_2</span>(id[x], <span class=\"number\">1</span>)+<span class=\"built_in\">query_2</span>(id[y], <span class=\"number\">1</span>)<span class=\"number\">-2</span>*<span class=\"built_in\">query_2</span>(id[lca], <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>第二棵线段树</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">build_2</span><span class=\"params\">(<span class=\"type\">int</span> l, <span class=\"type\">int</span> r, <span class=\"type\">int</span> i)</span> -&gt; <span class=\"type\">void</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    tr[i].l = l;</span><br><span class=\"line\">    tr[i].r = r;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l == r) <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = (l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">build_2</span>(l, mid, <span class=\"built_in\">ls</span>(i));</span><br><span class=\"line\">    <span class=\"built_in\">build_2</span>(mid+<span class=\"number\">1</span>, r, <span class=\"built_in\">rs</span>(i));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">add_2</span><span class=\"params\">(<span class=\"type\">int</span> l, <span class=\"type\">int</span> r, <span class=\"type\">long</span> k, <span class=\"type\">int</span> i)</span> -&gt; <span class=\"type\">void</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tr[i].l &gt; r <span class=\"keyword\">or</span> tr[i].r &lt; l) <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tr[i].l &gt;= l <span class=\"keyword\">and</span> tr[i].r &lt;= r) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tr[i].lz += k;</span><br><span class=\"line\">        tr[i].val += k*(tr[i].r-tr[i].l+<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">pushdown_2</span>(i);</span><br><span class=\"line\">    <span class=\"built_in\">add_2</span>(l, r, k, <span class=\"built_in\">ls</span>(i));</span><br><span class=\"line\">    <span class=\"built_in\">add_2</span>(l, r, k, <span class=\"built_in\">rs</span>(i));</span><br><span class=\"line\">    tr[i].val = tr[<span class=\"built_in\">ls</span>(i)].val+tr[<span class=\"built_in\">rs</span>(i)].val;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">query_2</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> i)</span> -&gt; <span class=\"type\">long</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tr[i].l &gt; x <span class=\"keyword\">or</span> tr[i].r &lt; x) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tr[i].l == x <span class=\"keyword\">and</span> tr[i].r == x) <span class=\"keyword\">return</span> tr[i].val;</span><br><span class=\"line\">    <span class=\"built_in\">pushdown_2</span>(i);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">query_2</span>(x, <span class=\"built_in\">ls</span>(i))+<span class=\"built_in\">query_2</span>(x, <span class=\"built_in\">rs</span>(i));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">pushdown_2</span><span class=\"params\">(<span class=\"type\">int</span> i)</span> -&gt; <span class=\"type\">void</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!tr[i].lz) <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    tr[<span class=\"built_in\">ls</span>(i)].lz += tr[i].lz;</span><br><span class=\"line\">    tr[<span class=\"built_in\">rs</span>(i)].lz += tr[i].lz;</span><br><span class=\"line\">    tr[<span class=\"built_in\">ls</span>(i)].val += tr[i].lz*(tr[<span class=\"built_in\">ls</span>(i)].r-tr[<span class=\"built_in\">ls</span>(i)].l+<span class=\"number\">1</span>);</span><br><span class=\"line\">    tr[<span class=\"built_in\">rs</span>(i)].val += tr[i].lz*(tr[<span class=\"built_in\">rs</span>(i)].r-tr[<span class=\"built_in\">rs</span>(i)].l+<span class=\"number\">1</span>);</span><br><span class=\"line\">    tr[i].lz = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>接下来是主函数，<s>得斯</s></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">main</span><span class=\"params\">()</span> -&gt; <span class=\"type\">signed</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%lld&quot;</span>, &amp;n, &amp;q, &amp;w);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i += <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%lld&quot;</span>, &amp;u[i], &amp;v[i], &amp;c[i]);</span><br><span class=\"line\">        <span class=\"built_in\">add_edge</span>(u[i], v[i]);</span><br><span class=\"line\">        <span class=\"built_in\">add_edge</span>(v[i], u[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">dfs1</span>(<span class=\"number\">1</span>, <span class=\"number\">0</span>); <span class=\"built_in\">dfs2</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>);  <span class=\"comment\">//剖了它</span></span><br><span class=\"line\">    <span class=\"built_in\">build_2</span>(<span class=\"number\">1</span>, n, <span class=\"number\">1</span>);        <span class=\"comment\">//_____</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i += <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dep[u[i]] &gt; dep[v[i]])       <span class=\"comment\">//加入初始边权</span></span><br><span class=\"line\">            <span class=\"built_in\">add_2</span>(id[u[i]], id[u[i]]+siz[u[i]]<span class=\"number\">-1</span>, c[i], <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span>  </span><br><span class=\"line\">            <span class=\"built_in\">add_2</span>(id[v[i]], id[v[i]]+siz[v[i]]<span class=\"number\">-1</span>, c[i], <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">dfsx</span>(<span class=\"number\">1</span>); </span><br><span class=\"line\">    <span class=\"built_in\">build_1</span>(<span class=\"number\">1</span>, n, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>, D; i &lt;= q; i += <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%lld&quot;</span>, &amp;D,&amp;E);</span><br><span class=\"line\">        D = (D+lst)%(n<span class=\"number\">-1</span>)+<span class=\"number\">1</span>;</span><br><span class=\"line\">        E = (E+lst)%w;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dep[u[D]] &gt; dep[v[D]])  </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">add_2</span>(id[u[D]], id[u[D]]+siz[u[D]]<span class=\"number\">-1</span>, E-c[D], <span class=\"number\">1</span>);  <span class=\"comment\">//权值的修改</span></span><br><span class=\"line\">            <span class=\"built_in\">change_1</span>(beg[u[D]], ::end[u[D]], <span class=\"number\">1</span>);               <span class=\"comment\">//直径的更新</span></span><br><span class=\"line\">            c[D] = E;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">add_2</span>(id[v[D]], id[v[D]]+siz[v[D]]<span class=\"number\">-1</span>, E-c[D], <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"built_in\">change_1</span>(beg[v[D]], ::end[v[D]], <span class=\"number\">1</span>);</span><br><span class=\"line\">            c[D] = E;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        lst = dr[<span class=\"number\">1</span>].val;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>, lst);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"结语\"><a class=\"markdownIt-Anchor\" href=\"#结语\">#</a> 结语</h3>\n<p The=\"\" End=\"\">常数有那么<s>亿点点大</s>。<br>\n若有什么问题欢迎评论或私信指出。<br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathsize=\"2.488em\"></mstyle></mrow><annotation encoding=\"application/x-tex\">\\Huge</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"></span></span></p>\n",
            "tags": [
                "题解"
            ]
        }
    ]
}